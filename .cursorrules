# Cursor Rules for OpenAI Conversation Plus

## Project Overview
This is a Home Assistant custom component for OpenAI Conversation Plus integration. The project provides AI-powered conversation capabilities within Home Assistant using OpenAI's Responses API exclusively (GPT-5 models only).

## Project Structure
- `custom_component/openai_conversation_plus/` - Main Home Assistant integration code
- `examples/` - Example configurations and prompt templates
- `docs/` - Development documentation and AI agent files
- `tests/` - Test files and testing configuration
- `.github/workflows/` - CI/CD and validation workflows

## Background Agent Development

### Agent Configuration
- AI agent files are stored in `docs/` directory
- Use `docs/agent.md` as the main agent configuration template
- Background agents can be configured for continuous monitoring and automation
- Agents can interact with Home Assistant services and entities

### Agent Capabilities
- **Continuous Monitoring**: Monitor system status, energy usage, and device states
- **Automated Responses**: Respond to events and conditions automatically
- **Service Execution**: Execute Home Assistant services based on triggers
- **Data Analysis**: Process sensor data and provide insights
- **Proactive Actions**: Take actions before issues arise
- **MCP Integration**: Connect to external tools and services via Model Context Protocol
- **Streaming Responses**: Real-time conversation with streaming token display
- **Web Search**: Built-in web search capability for fresh information

### Development Workflow
- Develop agents in the `dev` branch
- Test agents with sample data and scenarios
- Document agent behavior and configuration
- Use examples in `examples/` directory for testing

## API Integration

### OpenAI Responses API
- **Exclusive Usage**: This integration uses OpenAI Responses API only
- **No Chat Completions**: No fallback to chat.completions endpoint
- **GPT-5 Support**: Full support for GPT-5 models with reasoning and verbosity controls
- **Tool Types**: Supports function, web_search, and mcp tool types
- **Streaming**: Native streaming support for responsive conversations

### MCP (Model Context Protocol)
- Configure MCP servers via YAML in integration options
- Supports both simple list and mcpServers format
- Allows connection to external services and tools
- Properly validate server_label and server_url fields

## Code Standards

### Python Code
- Follow PEP 8 style guidelines
- Use type hints where appropriate
- Implement proper error handling and logging
- Follow Home Assistant integration patterns
- Use async/await for asynchronous operations

### Home Assistant Integration
- Follow Home Assistant custom component standards
- Use proper entity naming conventions
- Implement config flow for user configuration
- Handle device state updates properly
- Use Home Assistant's built-in services when possible

### File Organization
- Keep integration code in `custom_component/` directory
- Place examples in `examples/` directory
- Store documentation in `docs/` directory
- Maintain clean separation between core integration and examples

## Development Guidelines

### AI Agent Files
- AI agent configuration files in `docs/` should not be pushed to main branch
- Keep development and production code separate
- Main branch should only contain clean Home Assistant integration code

### Testing
- Write tests for all new functionality
- Use pytest for testing framework
- Maintain good test coverage
- Test both success and error scenarios

### Documentation
- Keep README files up to date
- Document all configuration options
- Provide clear examples for users
- Maintain separate documentation for developers and users

## Git Workflow
- Use feature branches for development
- Keep main branch clean and production-ready
- AI agent files should not be merged to main
- Use conventional commit messages
- Maintain clean commit history

## Dependencies
- Minimize external dependencies
- Use Home Assistant built-in functionality when possible
- Document all required dependencies
- Maintain compatibility with Home Assistant versions

## Security
- Never commit API keys or secrets
- Use homeassistant configuration values for api-keys, passwords etc
- Follow security best practices for homeassistant integrations

## Performance
- Optimize for Home Assistant performance
- Minimize API calls and external requests
- Implement proper caching where appropriate
- Monitor resource usage and optimize accordingly

## User Experience
- Provide clear error messages
- Implement user-friendly configuration
- Support multiple languages where possible
- Provide helpful documentation and examples
- Log relevant information to homeassistant core logs.
